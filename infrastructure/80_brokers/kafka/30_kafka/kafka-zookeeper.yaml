apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: strimzi
  labels:
    group: clusters
spec:

  kafka:
    # INFO: using default version set in strimzi-cluster-operator (see ConfigMap)
    version: 2.6.0
    replicas: 1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
    resources:
      requests:
        cpu: 1
        memory: 1G
      limits:
        cpu: 2
        memory: 2G
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    storage:
      type: persistent-claim
      size: 1G
      deleteClaim: false
    template:
      bootstrapService:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: kafka
      brokersService:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: kafka
      statefulset:
        # podManagementPolicy: OrderedReady
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: kafka
      pod:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: kafka
        # securityContext:
        #   runAsNonRoot: true
          # runAsUser: 1001
          # runAsGroup: 1001
          # fsGroup: 1001
      # kafkaContainer:
      #   securityContext:
      #     runAsNonRoot: true
      #     # runAsUser: 1001
      #     # runAsGroup: 1001
      #     # fsGroup: 1001
      #     readOnlyRootFilesystem: false
    config:
      background.threads: 12
      default.replication.factor: 1
      delete.topic.enable: true
      enable.auto.commit: true
      # logs
      ## cleanup
      log.cleaner.enable: true
      log.cleanup.policy: delete
      log.cleaner.threads: 3
      log.message.format.version: "2.6"
      ## retention
      log.retention.check.interval.ms: 60000 # 1 min
      log.retention.hours: 24 # 1 day
      ## rollover
      log.roll.hours: 12
      ## segments
      log.segment.bytes: 536870912 # 512 MB
      max.partition.fetch.bytes: 10485760 # 10 MB
      num.io.threads: 4
      num.network.threads: 3
      num.partitions: 1
      num.recovery.threads.per.data.dir: 1
      offsets.topic.replication.factor: 1
      queued.max.requests: 500
      replica.fetch.response.max.bytes: 10485760 # 10 MB
      socket.receive.buffer.bytes: 104857600 # 10 MB
      socket.request.max.bytes: 104857600 # 10 MB
      socket.send.buffer.bytes: 104857600 # 10 MB
      transaction.state.log.min.isr: 1
      transaction.state.log.replication.factor: 1
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: "INFO"
    metrics:
      # Inspired by config from Kafka 2.0.0 example rules:
      # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/kafka-2_0_0.yml
      lowercaseOutputName: true
      rules:
      # Special cases and very specific rules
      - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
          clientId: "$3"
          topic: "$4"
          partition: "$5"
      - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
          clientId: "$3"
          broker: "$4:$5"
      - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
        name: kafka_server_$1_connections_tls_info
        type: GAUGE
        labels:
          listener: "$2"
          networkProcessor: "$3"
          protocol: "$4"
          cipher: "$5"
      - pattern: kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
        name: kafka_server_$1_connections_software
        type: GAUGE
        labels:
          clientSoftwareName: "$2"
          clientSoftwareVersion: "$3"
          listener: "$4"
          networkProcessor: "$5"
      - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
        name: kafka_server_$1_$4
        type: GAUGE
        labels:
          listener: "$2"
          networkProcessor: "$3"
      - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
        name: kafka_server_$1_$4
        type: GAUGE
        labels:
          listener: "$2"
          networkProcessor: "$3"
      # Some percent metrics use MeanRate attribute
      # Ex) kafka.server<type=(KafkaRequestHandlerPool), name=(RequestHandlerAvgIdlePercent)><>MeanRate
      - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
        name: kafka_$1_$2_$3_percent
        type: GAUGE
      # Generic gauges for percents
      - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
        name: kafka_$1_$2_$3_percent
        type: GAUGE
      - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
        name: kafka_$1_$2_$3_percent
        type: GAUGE
        labels:
          "$4": "$5"
      # Generic per-second counters with 0-2 key/value pairs
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
      # Generic gauges with 0-2 key/value pairs
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
      # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
      # Note that these are missing the '_sum' metric!
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          "$6": "$7"
          quantile: "0.$8"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          quantile: "0.$6"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          quantile: "0.$4"

  zookeeper:
    replicas: 1
    resources:
      requests:
        cpu: 500m
        memory: 1G
      limits:
        cpu: 1
        memory: 2G
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    storage:
      type: persistent-claim
      size: 1G
      deleteClaim: false
    template:
      clientService:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: zookeeper
      nodesService:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: zookeeper
      statefulset:
        # podManagementPolicy: OrderedReady
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: zookeeper
      pod:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: clusters
            component: zookeeper
      #   securityContext:
      #     runAsNonRoot: true
      #     # runAsUser: 1001
      #     # runAsGroup: 1001
      #     # fsGroup: 1001
      # zookeeperContainer:
      #   securityContext:
      #     runAsNonRoot: true
      #     # runAsUser: 1001
      #     # runAsGroup: 1001
      #     # fsGroup: 1001
      #     readOnlyRootFilesystem: false
    metrics:
      # Inspired by Zookeeper rules
      # https://github.com/prometheus/jmx_exporter/blob/master/example_configs/zookeeper.yaml
      lowercaseOutputName: true
      rules:
      # replicated Zookeeper
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
        name: "zookeeper_$2"
        type: GAUGE
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
        name: "zookeeper_$3"
        type: GAUGE
        labels:
          replicaId: "$2"
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(Packets\\w+)"
        name: "zookeeper_$4"
        type: COUNTER
        labels:
          replicaId: "$2"
          memberType: "$3"
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
        name: "zookeeper_$4"
        type: GAUGE
        labels:
          replicaId: "$2"
          memberType: "$3"
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
        name: "zookeeper_$4_$5"
        type: GAUGE
        labels:
          replicaId: "$2"
          memberType: "$3"

  # WORK IN PROGRESS
  entityOperator:
    topicOperator:
      watchedNamespace: apps
      resources:
        requests:
          cpu: 250m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 256Mi
      livenessProbe:
        initialDelaySeconds: 30
        timeoutSeconds: 10
      readinessProbe:
        initialDelaySeconds: 15
        timeoutSeconds: 10
    template:
      deployment:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: operators
            component: entity-operator
      pod:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: operators
            component: entity-operator
        # securityContext:
        #   runAsNonRoot: true
        #   # runAsUser: 1001
        #   # runAsGroup: 1001
        #   # fsGroup: 1001
        #   readOnlyRootFilesystem: false
      # topicOperatorContainer:
      #   securityContext:
      #     runAsNonRoot: true
      #     # runAsUser: 1001
      #     # runAsGroup: 1001
      #     # fsGroup: 1001
      #     readOnlyRootFilesystem: false

  # WORK IN PROGRESS
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
    resources:
      requests:
        cpu: 250m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 256Mi
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 15
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 15
    template:
      service:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: exporters
            component: kafka-exporter
      deployment:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: exporters
            component: kafka-exporter
      pod:
        metadata:
          labels:
            app: strimzi
            domain: apps
            feature: kafka
            group: exporters
            component: kafka-exporter
      #   securityContext:
      #     runAsNonRoot: true
      #     # runAsUser: 1001
      #     # runAsGroup: 1001
      #     # fsGroup: 1001
      # container:
      #   securityContext:
      #     runAsNonRoot: true
      #     # runAsUser: 1001
      #     # runAsGroup: 1001
      #     # fsGroup: 1001
      #     readOnlyRootFilesystem: false
